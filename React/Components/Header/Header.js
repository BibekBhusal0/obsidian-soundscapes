import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useEffect, useState, useRef } from "react";
import { useObsidianPluginContext } from "../../Context/ObsidianPluginContext";
import Icon from "../Icon/Icon";
import Search from "../Search/Search";
import secondsToMinutesAndSeconds from "../../Utils/secondsToMinutesAndSeconds";
import { PLAYER_STATE } from "src/Types/Enums";
const Header = () => {
    var _a, _b;
    const { localPlayerStateObservable, plugin } = useObsidianPluginContext();
    const [localPlayerState, setLocalPlayerState] = useState(localPlayerStateObservable === null || localPlayerStateObservable === void 0 ? void 0 : localPlayerStateObservable.getValue());
    const titleElementRef = useRef(null);
    const shouldScrollTitle = (titleElementRef === null || titleElementRef === void 0 ? void 0 : titleElementRef.current)
        ? ((_a = titleElementRef === null || titleElementRef === void 0 ? void 0 : titleElementRef.current) === null || _a === void 0 ? void 0 : _a.scrollWidth) >
            ((_b = titleElementRef === null || titleElementRef === void 0 ? void 0 : titleElementRef.current) === null || _b === void 0 ? void 0 : _b.clientWidth)
        : false;
    /**
     * Subscribe to local player state from Obsidian
     */
    useEffect(() => {
        const unsubscribe = localPlayerStateObservable === null || localPlayerStateObservable === void 0 ? void 0 : localPlayerStateObservable.onChange((newState) => {
            setLocalPlayerState(newState);
        });
        return () => {
            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();
        };
    }, [setLocalPlayerState]);
    return (_jsxs("div", { className: "soundscapesmymusic-header", children: [_jsx("div", { className: "soundscapesmymusic-left", children: _jsxs("div", { className: "soundscapesmymusic-left-controls", children: [_jsx("button", { className: "soundscapesmymusic-left-controls-button", onClick: () => plugin === null || plugin === void 0 ? void 0 : plugin.previous(), children: _jsx(Icon, { name: "skip-back" }) }), localPlayerState.playerState === PLAYER_STATE.PAUSED && (_jsx("button", { className: "soundscapesmymusic-left-controls-button soundscapesmymusic-left-controls-button--large", onClick: () => plugin === null || plugin === void 0 ? void 0 : plugin.play(), children: _jsx(Icon, { name: "play" }) })), localPlayerState.playerState === PLAYER_STATE.PLAYING && (_jsx("button", { className: "soundscapesmymusic-left-controls-button soundscapesmymusic-left-controls-button--large", onClick: () => plugin === null || plugin === void 0 ? void 0 : plugin.pause(), children: _jsx(Icon, { name: "pause" }) })), _jsx("button", { className: "soundscapesmymusic-left-controls-button", onClick: () => plugin === null || plugin === void 0 ? void 0 : plugin.next(), children: _jsx(Icon, { name: "skip-forward" }) })] }) }), _jsx("div", { className: "soundscapesmymusic-volume", children: _jsx("input", { type: "range", min: "0", max: "100", value: plugin === null || plugin === void 0 ? void 0 : plugin.settings.volume, onChange: (e) => plugin === null || plugin === void 0 ? void 0 : plugin.onVolumeChange(e) }) }), _jsx("div", { className: "soundscapesmymusic-middle", children: localPlayerState.currentTrack && (_jsxs(_Fragment, { children: [_jsxs("div", { className: "soundscapesmymusic-middle-line1", children: [_jsx("div", { className: "soundscapesmymusic-middle-line1-left", children: _jsx("button", { className: `soundscapesmymusic-middle-line1-button ${(plugin === null || plugin === void 0 ? void 0 : plugin.settings.myMusicShuffle) &&
                                            "soundscapesmymusic-middle-line1-button--active"}`, onClick: () => {
                                            plugin === null || plugin === void 0 ? void 0 : plugin.toggleShuffle();
                                        }, children: _jsx(Icon, { name: "shuffle" }) }) }), _jsx("div", { className: `soundscapesmymusic-middle-line1-title ${shouldScrollTitle &&
                                        "soundscapesmymusic-middle-line1-title--scroll"}`, ref: titleElementRef, children: _jsx("span", { className: "soundscapesmymusic-middle-line1-title-text", children: localPlayerState.currentTrack.title }) }), _jsx("div", { className: "soundscapesmymusic-middle-line1-right" })] }), _jsxs("div", { className: "soundscapesmymusic-middle-line2", children: [_jsx("div", { className: "soundscapesmymusic-middle-line2-left", children: secondsToMinutesAndSeconds(localPlayerState.currentTime || 0) }), _jsx("div", { className: "soundscapesmymusic-middle-line2-artist", children: localPlayerState.currentTrack.artist }), _jsxs("div", { className: "soundscapesmymusic-middle-line2-right", children: ["-", secondsToMinutesAndSeconds((localPlayerState.currentTrack.duration ||
                                            0) -
                                            (localPlayerState.currentTime || 0))] })] }), _jsx("input", { type: "range", min: "0", max: "100", step: "0.1", value: ((localPlayerState.currentTime || 0) /
                                (localPlayerState.currentTrack.duration ||
                                    0)) *
                                100, onChange: (e) => {
                                var _a;
                                return plugin === null || plugin === void 0 ? void 0 : plugin.seek((parseInt(e.target.value) / 100) *
                                    (((_a = localPlayerState.currentTrack) === null || _a === void 0 ? void 0 : _a.duration) || 0));
                            }, className: "soundscapesmymusic-middle-seekbar" })] })) }), _jsx("div", { className: "soundscapesmymusic-right", children: _jsx(Search, {}) })] }));
};
export default Header;
//# sourceMappingURL=data:application/json;base64,