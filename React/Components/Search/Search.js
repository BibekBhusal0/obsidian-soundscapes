import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useMemo, useState, useRef } from "react";
import { useObsidianPluginContext } from "../../Context/ObsidianPluginContext";
import Icon from "../Icon/Icon";
const Search = () => {
    const { settingsObservable, plugin } = useObsidianPluginContext();
    const [settings, setSettings] = useState(settingsObservable === null || settingsObservable === void 0 ? void 0 : settingsObservable.getValue());
    const [query, setQuery] = useState("");
    const [selectedResultIndex, setSelectedResultIndex] = useState(0);
    const resultsDiv = useRef(null);
    const searchResult = useMemo(() => query.trim().length === 0
        ? []
        : settings.myMusicIndex
            .filter((song) => (song.title &&
            song.title
                .toLowerCase()
                .indexOf(query.toLowerCase()) > -1) ||
            (song.artist &&
                song.artist
                    .toLowerCase()
                    .indexOf(query.toLowerCase()) > -1) ||
            (song.album &&
                song.album
                    .toLowerCase()
                    .indexOf(query.toLowerCase()) > -1) ||
            song.fileName
                .toLowerCase()
                .indexOf(query.toLowerCase()) > -1)
            .slice(0, 20), [settings.myMusicIndex, query]);
    /**
     * When query changes, reset selected index to 0
     */
    useEffect(() => {
        setSelectedResultIndex(0);
    }, [query, setSelectedResultIndex]);
    /**
     * Subscribe to settings from Obsidian
     */
    useEffect(() => {
        const unsubscribe = settingsObservable === null || settingsObservable === void 0 ? void 0 : settingsObservable.onChange((newSettings) => {
            setSettings(newSettings);
        });
        return () => {
            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();
        };
    }, [setSettings]);
    return (_jsxs("div", { className: "soundscapesmymusic-right-search", children: [_jsx(Icon, { name: "search" }), _jsx("input", { type: "text", className: "soundscapesmymusic-right-search-input", placeholder: "Search", value: query, onChange: (e) => setQuery(e.target.value), onFocus: (e) => {
                    e.target.addClass("soundscapesmymusic-right-search--active");
                }, onBlur: (e) => {
                    // Need to delay this so the click event can be picked up first
                    setTimeout(() => e.target.removeClass("soundscapesmymusic-right-search--active"), 100);
                }, onKeyUp: (e) => {
                    var _a, _b, _c;
                    if (searchResult.length > 0) {
                        switch (e.key) {
                            case "ArrowUp":
                                if (selectedResultIndex > 0) {
                                    setSelectedResultIndex(selectedResultIndex - 1);
                                    if (selectedResultIndex + 1 > 5) {
                                        (_a = resultsDiv === null || resultsDiv === void 0 ? void 0 : resultsDiv.current) === null || _a === void 0 ? void 0 : _a.scrollTo({
                                            top: (selectedResultIndex + 1 - 5) *
                                                60,
                                        });
                                    }
                                    else {
                                        (_b = resultsDiv === null || resultsDiv === void 0 ? void 0 : resultsDiv.current) === null || _b === void 0 ? void 0 : _b.scrollTo({
                                            top: 0,
                                        });
                                    }
                                }
                                break;
                            case "ArrowDown":
                                if (selectedResultIndex <
                                    searchResult.length - 1) {
                                    setSelectedResultIndex(selectedResultIndex + 1);
                                    // If we're beyond 6 results (index 5), move the scrollbar. Each element is around 60px;
                                    if (selectedResultIndex + 1 > 5) {
                                        (_c = resultsDiv === null || resultsDiv === void 0 ? void 0 : resultsDiv.current) === null || _c === void 0 ? void 0 : _c.scrollTo({
                                            // We're doing - 5 here because we want to align with the element that would be at the top
                                            // if the selected element is at the bottom of the view.
                                            top: (selectedResultIndex + 1 - 5) *
                                                60,
                                        });
                                    }
                                }
                                break;
                            case "Enter":
                                plugin === null || plugin === void 0 ? void 0 : plugin.changeMyMusicTrack(searchResult[selectedResultIndex].fileName);
                                break;
                        }
                    }
                } }), _jsxs("div", { className: "soundscapesmymusic-right-search-results", ref: resultsDiv, children: [query.trim() !== "" && searchResult.length === 0 && (_jsx("div", { className: "soundscapesmymusic-right-search-results-message", children: "No results found" })), query.trim() === "" && (_jsx("div", { className: "soundscapesmymusic-right-search-results-message", children: "Start typing for results..." })), searchResult.map((song, index) => (_jsxs("div", { className: `soundscapesmymusic-right-search-results-result ${selectedResultIndex === index &&
                            "soundscapesmymusic-right-search-results-result--selected"}`, onClick: () => plugin === null || plugin === void 0 ? void 0 : plugin.changeMyMusicTrack(song.fileName), children: [_jsx("div", { className: "soundscapesmymusic-right-search-results-result-line1", children: song.title }), _jsx("div", { className: "soundscapesmymusic-right-search-results-result-line2", children: song.artist })] }, song.fileName)))] })] }));
};
export default Search;
//# sourceMappingURL=data:application/json;base64,